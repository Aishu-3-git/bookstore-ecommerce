{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya MS\\\\OneDrive\\\\Desktop\\\\bookstore ecommerce app\\\\client\\\\src\\\\components\\\\BookList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BookCard from './BookCard'; // We will create this component next\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookList = () => {\n  _s();\n  const [books, setBooks] = useState([]);\n  useEffect(() => {\n    // Fetch books from the backend API\n    axios.get('http://localhost:3001/api/books') // Replace with your server's URL if different\n    .then(response => {\n      setBooks(response.data); // Set books to state\n    }).catch(error => {\n      console.error(\"There was an error fetching the books:\", error);\n    });\n  }, []); // Empty array means this effect will run once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"book-list\",\n    children: books.map(book => /*#__PURE__*/_jsxDEV(BookCard, {\n      book: book\n    }, book._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(BookList, \"ww1JAI05mMsgubm5EIyBKqdj5S0=\");\n_c = BookList;\nexport default BookList;\nvar _c;\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"names":["React","useEffect","useState","axios","BookCard","jsxDEV","_jsxDEV","BookList","_s","books","setBooks","get","then","response","data","catch","error","console","className","children","map","book","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aishwarya MS/OneDrive/Desktop/bookstore ecommerce app/client/src/components/BookList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport BookCard from './BookCard'; // We will create this component next\r\n\r\nconst BookList = () => {\r\n  const [books, setBooks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch books from the backend API\r\n    axios.get('http://localhost:3001/api/books')  // Replace with your server's URL if different\r\n      .then(response => {\r\n        setBooks(response.data);  // Set books to state\r\n      })\r\n      .catch(error => {\r\n        console.error(\"There was an error fetching the books:\", error);\r\n      });\r\n  }, []);  // Empty array means this effect will run once when the component mounts\r\n\r\n  return (\r\n    <div className=\"book-list\">\r\n      {books.map(book => (\r\n        <BookCard key={book._id} book={book} />  \r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CAACQ,GAAG,CAAC,iCAAiC,CAAC,CAAE;IAAA,CAC3CC,IAAI,CAACC,QAAQ,IAAI;MAChBH,QAAQ,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBACEV,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBV,KAAK,CAACW,GAAG,CAACC,IAAI,iBACbf,OAAA,CAACF,QAAQ;MAAgBiB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CArBID,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AAuBd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}